{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
        "id": "view-in-github",
        "colab_type": "text"},
   "source": [
    "<a href=\"https://colab.research.google.com/github/nthammadi-uncc/knowledge-discovery-in-databases/blob/main/Preparing_Data_for_Modeling_Churn_Dataset_Naomi_T.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>",
    "<h2>Preparing Data for Modeling using Church dataset</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Author: Naomi Nikita Thammadi\n",
    "## Date: 9-20-2021\n",
    "## Description: This notebook is created for HW5: Preparing Data for modeling and completes all these tasks:\n",
    "## 1. Import necessary modules\n",
    "## 2. Open churn\n",
    "## 3. Partition the data set, so that 67% of the records are included in the training data set and\n",
    "##    33% are included in the test data set \n",
    "## 4. Use a bar graph to confirm your proportions\n",
    "## 5. Identify the total number of records in the training data set and how many records in the\n",
    "##    training data set have a churn value of true\n",
    "## 6. Use your answers from the previous exercise to calculate how many true churn records\n",
    "##    you need to resample in order to have 20% of the rebalanced data set have true churn values\n",
    "## 7. Perform the rebalancing described in the previous exercise and confirm that 20% of the\n",
    "##    records in the rebalanced data set have true churn values\n",
    "## 8. Which baseline model do we use to compare our classification model performance against? \n",
    "##    To which value does this baseline model assign all predictions? \n",
    "##    What is the accuracy of this baseline model? \n",
    "## 9. Validate your partition by testing for the difference in proportion of true churn records\n",
    "##    for the training set versus the test set\n",
    "## 10. Create a final markdown that summarizes your results\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>TASK 1: Import the necessary modules</h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# importing packages\n",
    "import numpy as np\n",
    "from scipy.stats import norm\n",
    "from statistics import stdev\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import random\n",
    "import os\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#set random seed\n",
    "seed=np.random.seed(42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>Task 2: Load the churn dataset</h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>Account Length</th>\n",
       "      <th>Area Code</th>\n",
       "      <th>Phone</th>\n",
       "      <th>Intl Plan</th>\n",
       "      <th>VMail Plan</th>\n",
       "      <th>VMail Message</th>\n",
       "      <th>Day Mins</th>\n",
       "      <th>Day Calls</th>\n",
       "      <th>Day Charge</th>\n",
       "      <th>...</th>\n",
       "      <th>Eve Charge</th>\n",
       "      <th>Night Mins</th>\n",
       "      <th>Night Calls</th>\n",
       "      <th>Night Charge</th>\n",
       "      <th>Intl Mins</th>\n",
       "      <th>Intl Calls</th>\n",
       "      <th>Intl Charge</th>\n",
       "      <th>CustServ Calls</th>\n",
       "      <th>Old Churn</th>\n",
       "      <th>Churn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>KS</td>\n",
       "      <td>128</td>\n",
       "      <td>415</td>\n",
       "      <td>382-4657</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>25</td>\n",
       "      <td>265.1</td>\n",
       "      <td>110</td>\n",
       "      <td>45.07</td>\n",
       "      <td>...</td>\n",
       "      <td>16.78</td>\n",
       "      <td>244.7</td>\n",
       "      <td>91</td>\n",
       "      <td>11.01</td>\n",
       "      <td>10.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2.70</td>\n",
       "      <td>1</td>\n",
       "      <td>False.</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>OH</td>\n",
       "      <td>107</td>\n",
       "      <td>415</td>\n",
       "      <td>371-7191</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>26</td>\n",
       "      <td>161.6</td>\n",
       "      <td>123</td>\n",
       "      <td>27.47</td>\n",
       "      <td>...</td>\n",
       "      <td>16.62</td>\n",
       "      <td>254.4</td>\n",
       "      <td>103</td>\n",
       "      <td>11.45</td>\n",
       "      <td>13.7</td>\n",
       "      <td>3</td>\n",
       "      <td>3.70</td>\n",
       "      <td>1</td>\n",
       "      <td>False.</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NJ</td>\n",
       "      <td>137</td>\n",
       "      <td>415</td>\n",
       "      <td>358-1921</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>243.4</td>\n",
       "      <td>114</td>\n",
       "      <td>41.38</td>\n",
       "      <td>...</td>\n",
       "      <td>10.30</td>\n",
       "      <td>162.6</td>\n",
       "      <td>104</td>\n",
       "      <td>7.32</td>\n",
       "      <td>12.2</td>\n",
       "      <td>5</td>\n",
       "      <td>3.29</td>\n",
       "      <td>0</td>\n",
       "      <td>False.</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>OH</td>\n",
       "      <td>84</td>\n",
       "      <td>408</td>\n",
       "      <td>375-9999</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>299.4</td>\n",
       "      <td>71</td>\n",
       "      <td>50.90</td>\n",
       "      <td>...</td>\n",
       "      <td>5.26</td>\n",
       "      <td>196.9</td>\n",
       "      <td>89</td>\n",
       "      <td>8.86</td>\n",
       "      <td>6.6</td>\n",
       "      <td>7</td>\n",
       "      <td>1.78</td>\n",
       "      <td>2</td>\n",
       "      <td>False.</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>OK</td>\n",
       "      <td>75</td>\n",
       "      <td>415</td>\n",
       "      <td>330-6626</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>166.7</td>\n",
       "      <td>113</td>\n",
       "      <td>28.34</td>\n",
       "      <td>...</td>\n",
       "      <td>12.61</td>\n",
       "      <td>186.9</td>\n",
       "      <td>121</td>\n",
       "      <td>8.41</td>\n",
       "      <td>10.1</td>\n",
       "      <td>3</td>\n",
       "      <td>2.73</td>\n",
       "      <td>3</td>\n",
       "      <td>False.</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  State  Account Length  Area Code     Phone Intl Plan VMail Plan  \\\n",
       "0    KS             128        415  382-4657        no        yes   \n",
       "1    OH             107        415  371-7191        no        yes   \n",
       "2    NJ             137        415  358-1921        no         no   \n",
       "3    OH              84        408  375-9999       yes         no   \n",
       "4    OK              75        415  330-6626       yes         no   \n",
       "\n",
       "   VMail Message  Day Mins  Day Calls  Day Charge  ...  Eve Charge  \\\n",
       "0             25     265.1        110       45.07  ...       16.78   \n",
       "1             26     161.6        123       27.47  ...       16.62   \n",
       "2              0     243.4        114       41.38  ...       10.30   \n",
       "3              0     299.4         71       50.90  ...        5.26   \n",
       "4              0     166.7        113       28.34  ...       12.61   \n",
       "\n",
       "   Night Mins  Night Calls  Night Charge  Intl Mins  Intl Calls  Intl Charge  \\\n",
       "0       244.7           91         11.01       10.0           3         2.70   \n",
       "1       254.4          103         11.45       13.7           3         3.70   \n",
       "2       162.6          104          7.32       12.2           5         3.29   \n",
       "3       196.9           89          8.86        6.6           7         1.78   \n",
       "4       186.9          121          8.41       10.1           3         2.73   \n",
       "\n",
       "   CustServ Calls  Old Churn  Churn  \n",
       "0               1     False.  False  \n",
       "1               1     False.  False  \n",
       "2               0     False.  False  \n",
       "3               2     False.  False  \n",
       "4               3     False.  False  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#read the churn dataset using the pandas framework\n",
    "churn=pd.read_csv('data/churn')\n",
    "churn.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Account Length</th>\n",
       "      <th>Area Code</th>\n",
       "      <th>VMail Message</th>\n",
       "      <th>Day Mins</th>\n",
       "      <th>Day Calls</th>\n",
       "      <th>Day Charge</th>\n",
       "      <th>Eve Mins</th>\n",
       "      <th>Eve Calls</th>\n",
       "      <th>Eve Charge</th>\n",
       "      <th>Night Mins</th>\n",
       "      <th>Night Calls</th>\n",
       "      <th>Night Charge</th>\n",
       "      <th>Intl Mins</th>\n",
       "      <th>Intl Calls</th>\n",
       "      <th>Intl Charge</th>\n",
       "      <th>CustServ Calls</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>101.064806</td>\n",
       "      <td>437.182418</td>\n",
       "      <td>8.099010</td>\n",
       "      <td>179.775098</td>\n",
       "      <td>100.435644</td>\n",
       "      <td>30.562307</td>\n",
       "      <td>200.980348</td>\n",
       "      <td>100.114311</td>\n",
       "      <td>17.083540</td>\n",
       "      <td>200.872037</td>\n",
       "      <td>100.107711</td>\n",
       "      <td>9.039325</td>\n",
       "      <td>10.237294</td>\n",
       "      <td>4.479448</td>\n",
       "      <td>2.764581</td>\n",
       "      <td>1.562856</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>39.822106</td>\n",
       "      <td>42.371290</td>\n",
       "      <td>13.688365</td>\n",
       "      <td>54.467389</td>\n",
       "      <td>20.069084</td>\n",
       "      <td>9.259435</td>\n",
       "      <td>50.713844</td>\n",
       "      <td>19.922625</td>\n",
       "      <td>4.310668</td>\n",
       "      <td>50.573847</td>\n",
       "      <td>19.568609</td>\n",
       "      <td>2.275873</td>\n",
       "      <td>2.791840</td>\n",
       "      <td>2.461214</td>\n",
       "      <td>0.753773</td>\n",
       "      <td>1.315491</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>408.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>23.200000</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>1.040000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>74.000000</td>\n",
       "      <td>408.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>143.700000</td>\n",
       "      <td>87.000000</td>\n",
       "      <td>24.430000</td>\n",
       "      <td>166.600000</td>\n",
       "      <td>87.000000</td>\n",
       "      <td>14.160000</td>\n",
       "      <td>167.000000</td>\n",
       "      <td>87.000000</td>\n",
       "      <td>7.520000</td>\n",
       "      <td>8.500000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.300000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>101.000000</td>\n",
       "      <td>415.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>179.400000</td>\n",
       "      <td>101.000000</td>\n",
       "      <td>30.500000</td>\n",
       "      <td>201.400000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>17.120000</td>\n",
       "      <td>201.200000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>9.050000</td>\n",
       "      <td>10.300000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.780000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>127.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>216.400000</td>\n",
       "      <td>114.000000</td>\n",
       "      <td>36.790000</td>\n",
       "      <td>235.300000</td>\n",
       "      <td>114.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>235.300000</td>\n",
       "      <td>113.000000</td>\n",
       "      <td>10.590000</td>\n",
       "      <td>12.100000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>3.270000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>243.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>51.000000</td>\n",
       "      <td>350.800000</td>\n",
       "      <td>165.000000</td>\n",
       "      <td>59.640000</td>\n",
       "      <td>363.700000</td>\n",
       "      <td>170.000000</td>\n",
       "      <td>30.910000</td>\n",
       "      <td>395.000000</td>\n",
       "      <td>175.000000</td>\n",
       "      <td>17.770000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>5.400000</td>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Account Length    Area Code  VMail Message     Day Mins    Day Calls  \\\n",
       "count     3333.000000  3333.000000    3333.000000  3333.000000  3333.000000   \n",
       "mean       101.064806   437.182418       8.099010   179.775098   100.435644   \n",
       "std         39.822106    42.371290      13.688365    54.467389    20.069084   \n",
       "min          1.000000   408.000000       0.000000     0.000000     0.000000   \n",
       "25%         74.000000   408.000000       0.000000   143.700000    87.000000   \n",
       "50%        101.000000   415.000000       0.000000   179.400000   101.000000   \n",
       "75%        127.000000   510.000000      20.000000   216.400000   114.000000   \n",
       "max        243.000000   510.000000      51.000000   350.800000   165.000000   \n",
       "\n",
       "        Day Charge     Eve Mins    Eve Calls   Eve Charge   Night Mins  \\\n",
       "count  3333.000000  3333.000000  3333.000000  3333.000000  3333.000000   \n",
       "mean     30.562307   200.980348   100.114311    17.083540   200.872037   \n",
       "std       9.259435    50.713844    19.922625     4.310668    50.573847   \n",
       "min       0.000000     0.000000     0.000000     0.000000    23.200000   \n",
       "25%      24.430000   166.600000    87.000000    14.160000   167.000000   \n",
       "50%      30.500000   201.400000   100.000000    17.120000   201.200000   \n",
       "75%      36.790000   235.300000   114.000000    20.000000   235.300000   \n",
       "max      59.640000   363.700000   170.000000    30.910000   395.000000   \n",
       "\n",
       "       Night Calls  Night Charge    Intl Mins   Intl Calls  Intl Charge  \\\n",
       "count  3333.000000   3333.000000  3333.000000  3333.000000  3333.000000   \n",
       "mean    100.107711      9.039325    10.237294     4.479448     2.764581   \n",
       "std      19.568609      2.275873     2.791840     2.461214     0.753773   \n",
       "min      33.000000      1.040000     0.000000     0.000000     0.000000   \n",
       "25%      87.000000      7.520000     8.500000     3.000000     2.300000   \n",
       "50%     100.000000      9.050000    10.300000     4.000000     2.780000   \n",
       "75%     113.000000     10.590000    12.100000     6.000000     3.270000   \n",
       "max     175.000000     17.770000    20.000000    20.000000     5.400000   \n",
       "\n",
       "       CustServ Calls  \n",
       "count     3333.000000  \n",
       "mean         1.562856  \n",
       "std          1.315491  \n",
       "min          0.000000  \n",
       "25%          1.000000  \n",
       "50%          1.000000  \n",
       "75%          2.000000  \n",
       "max          9.000000  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#use the describe function to describe the dataset\n",
    "churn.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>Task 3: Partition the dataset into Training(67%) and Testing(33%) datasets</h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#divide into train and test sets using train_test_split\n",
    "X_train, X_test = train_test_split(churn, test_size=0.33, random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2233, 22)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1100, 22)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>Task 4: Use a bar-graph to confirm your proportions</h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Partition'>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot a bar graph of the train and test data sets to check proportions\n",
    "df = pd.DataFrame({'Partition':['Train', 'Test'],\n",
    "                   'Portion':[(X_train.shape[0]/churn.shape[0]),\n",
    "                              (X_test.shape[0]/churn.shape[0])]\n",
    "                   })\n",
    "# create barplot\n",
    "df.set_index('Partition').plot(kind='bar')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>Task 5: Identify the total number of records in training dataset and number of records that have churn value as true</h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The total number of records in the training dataset is 2233\n",
      "There are 323 records in the training data set that have churn value equal to True\n"
     ]
    }
   ],
   "source": [
    "print('The total number of records in the training dataset is', X_train.shape[0])\n",
    "print('There are', X_train.loc[X_train['Churn']==True].shape[0], 'records in the training data set that have churn value equal to True')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The percentage of records with churn value as true are:  14.46 %\n"
     ]
    }
   ],
   "source": [
    "#check the % of true churn records in the training set\n",
    "print('The percentage of records with churn value as true are: ', round((X_train.loc[X_train['Churn']==True].shape[0]/X_train.shape[0])*100,2), '%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>Task 6: Resample the dataset to have 20% of the rebanced data set to have true churn values</h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The portion size is  154.50000000000003\n"
     ]
    }
   ],
   "source": [
    "# create variables needed to compute resampled record size\n",
    "true_churn_records = X_train.loc[X_train['Churn']==True].shape[0]\n",
    "total_records = X_train.shape[0]\n",
    "\n",
    "# determin portion size to ressample\n",
    "portion_size = (0.2 * total_records - true_churn_records) / 0.8\n",
    "print('The portion size is ', portion_size)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(323, 1910, 2233)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.loc[X_train['Churn']==True].shape[0],X_train.loc[X_train['Churn']==False].shape[0], X_train.shape[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>Task 7: Rebalance the train dataset to have 20% of true churn values and confirm it</h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 2388 entries, 2360 to 1122\n",
      "Data columns (total 22 columns):\n",
      " #   Column          Non-Null Count  Dtype  \n",
      "---  ------          --------------  -----  \n",
      " 0   State           2388 non-null   object \n",
      " 1   Account Length  2388 non-null   int64  \n",
      " 2   Area Code       2388 non-null   int64  \n",
      " 3   Phone           2388 non-null   object \n",
      " 4   Intl Plan       2388 non-null   object \n",
      " 5   VMail Plan      2388 non-null   object \n",
      " 6   VMail Message   2388 non-null   int64  \n",
      " 7   Day Mins        2388 non-null   float64\n",
      " 8   Day Calls       2388 non-null   int64  \n",
      " 9   Day Charge      2388 non-null   float64\n",
      " 10  Eve Mins        2388 non-null   float64\n",
      " 11  Eve Calls       2388 non-null   int64  \n",
      " 12  Eve Charge      2388 non-null   float64\n",
      " 13  Night Mins      2388 non-null   float64\n",
      " 14  Night Calls     2388 non-null   int64  \n",
      " 15  Night Charge    2388 non-null   float64\n",
      " 16  Intl Mins       2388 non-null   float64\n",
      " 17  Intl Calls      2388 non-null   int64  \n",
      " 18  Intl Charge     2388 non-null   float64\n",
      " 19  CustServ Calls  2388 non-null   int64  \n",
      " 20  Old Churn       2388 non-null   object \n",
      " 21  Churn           2388 non-null   bool   \n",
      "dtypes: bool(1), float64(8), int64(8), object(5)\n",
      "memory usage: 412.8+ KB\n"
     ]
    }
   ],
   "source": [
    "# Perform the rebalancing described and confirm that 20% of the records in the rebalanced data set have true churn \n",
    "\n",
    "# subset the records to be resampled\n",
    "to_resample = X_train.loc[X_train['Churn']==True]\n",
    "\n",
    "# resample the '>50K' records to the determined sample size\n",
    "our_resample = to_resample.sample(n = round(portion_size), replace = True)\n",
    "\n",
    "# concatenate the sampled data with the rest of the training data so that it's rebalanced\n",
    "X_train_rebal = pd.concat([X_train, our_resample])\n",
    "X_train_rebal.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Partition'>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAccAAAD4CAYAAACZpy1+AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAAsTAAALEwEAmpwYAAAUWklEQVR4nO3dfbBcdX3H8feXEPKASWiTWFNiehGDPJgQNFChmAKlHU0UpOJEYQgSWqqtZWqrFv5oTbU6KfaBQao0ajWdRmmtFZQHH0ZAG4XCDb2E8KQWQnsNKoYaARMg8ds/9gSXH5vs3nB3z93L+zVzh91zfrv72TM398PvnLNnIzORJEk/t1/dASRJGmssR0mSCpajJEkFy1GSpILlKElSYf+6A2h0zJo1KwcGBuqOIUl9Y8OGDT/KzNmt1lmO48TAwACDg4N1x5CkvhERD+5pnbtVJUkqWI6SJBUsR0mSCh5zlKRx5KmnnmJ4eJgdO3bUHWXMmDx5MnPnzmXixIkdP8ZylKRxZHh4mGnTpjEwMEBE1B2ndpnJ1q1bGR4e5pBDDun4ce5WlaRxZMeOHcycOdNirEQEM2fOHPFM2nKUpHHGYnymfdkelqMkSQWPOUrSODZw0bWj+nybVy9rO2bChAksWLCAnTt3csQRR7B27VqmTp3a0fMPDQ2xZcsWli5dCsAXvvAF7r77bi666KLnlHuknDlKkkbVlClTGBoaYtOmTRxwwAFcccUVHT1u586dDA0Ncd111z297LTTTut5MYIzR0lSF7361a9m48aNPPLII6xcuZL777+fqVOnsmbNGhYuXMiqVavYsmULmzdvZtasWaxfv57t27ezfv16Lr74YrZv387g4CCXX345Dz74ICtXruThhx9m9uzZfPKTn2TevHm89a1vZfr06QwODvL973+fSy65hDPPPPM55XbmKEnqip07d3L99dezYMEC3vve93LMMcewceNGPvjBD7JixYqnx23YsIGrr76aT3/607zvfe9j+fLlDA0NsXz58mc83zve8Q5WrFjBxo0bOfvss7nwwgufXvfQQw+xfv16rrnmmlGZaVqOkqRRtX37dhYtWsTixYuZN28e559/PuvXr+ecc84B4JRTTmHr1q1s27YNaOw6nTJlStvnvfnmmznrrLMAOOecc1i/fv3T697whjew3377ceSRR/KDH/zgOb8H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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot a bar graph of the training rebalanced, train and test data sets to see the difference proportions\n",
    "df = pd.DataFrame({'Partition':['Rebalanced Train', 'Train','Test'],\n",
    "                   'Portion':[(X_train_rebal.shape[0]/churn.shape[0]),\n",
    "                              (X_train.shape[0]/churn.shape[0]), \n",
    "                              (X_test.shape[0]/churn.shape[0])]\n",
    "                   })\n",
    "# create barplot\n",
    "df.set_index('Partition').plot(kind='barh')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h5>Even though the Train rebalanced and Test datasets now make up more than 100% of the initial churn dataset records, it is alright because <br/><u>Test Data sets should never be balanced</u></h5>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Proportion of Churn in rebalanced training data is \n",
      " False    0.799832\n",
      "True     0.200168\n",
      "Name: Churn, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# table proportion of churn in training data\n",
    "proportion_churn = X_train_rebal['Churn'].value_counts() / X_train_rebal.shape[0]\n",
    "print('Proportion of Churn in rebalanced training data is \\n',proportion_churn)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h5>The Rebalanced Training data set has 20% of true churn records</h5>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>Task 8: Baseline model to compare Classification Performance</h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The baseline is \n",
      " False    0.855352\n",
      "True     0.144648\n",
      "Name: Churn, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "## 8. Which baseline model do we use to compare our classification model performance against? \n",
    "##    To which value does this baseline model assign all predictions? \n",
    "##    What is the accuracy of this baseline model? \n",
    "\n",
    "baseline_value = X_train['Churn'].value_counts() / X_train.shape[0]\n",
    "print('The baseline is \\n',baseline_value)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h5> The baseline is determined by looking at which Churn value has the greatest proportion of the data which is False.\n",
    "<h5>If a model were to predict false churn values then the model would have an accuracy of 86% \n",
    "<h5>Therefore the selected model would have to outperform this baseline model in order to have any use in the real world. </h5>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>Task 9: Validate your partition by testing for the difference in mean day minutes for the training\n",
    "set versus the test set</h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['State',\n",
       " 'Account Length',\n",
       " 'Area Code',\n",
       " 'Phone',\n",
       " 'Intl Plan',\n",
       " 'VMail Plan',\n",
       " 'VMail Message',\n",
       " 'Day Mins',\n",
       " 'Day Calls',\n",
       " 'Day Charge',\n",
       " 'Eve Mins',\n",
       " 'Eve Calls',\n",
       " 'Eve Charge',\n",
       " 'Night Mins',\n",
       " 'Night Calls',\n",
       " 'Night Charge',\n",
       " 'Intl Mins',\n",
       " 'Intl Calls',\n",
       " 'Intl Charge',\n",
       " 'CustServ Calls',\n",
       " 'Old Churn',\n",
       " 'Churn']"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#get the list of column names\n",
    "churn.columns.values.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Account Length</th>\n",
       "      <th>Area Code</th>\n",
       "      <th>VMail Message</th>\n",
       "      <th>Day Mins</th>\n",
       "      <th>Day Calls</th>\n",
       "      <th>Day Charge</th>\n",
       "      <th>Eve Mins</th>\n",
       "      <th>Eve Calls</th>\n",
       "      <th>Eve Charge</th>\n",
       "      <th>Night Mins</th>\n",
       "      <th>Night Calls</th>\n",
       "      <th>Night Charge</th>\n",
       "      <th>Intl Mins</th>\n",
       "      <th>Intl Calls</th>\n",
       "      <th>Intl Charge</th>\n",
       "      <th>CustServ Calls</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>101.064806</td>\n",
       "      <td>437.182418</td>\n",
       "      <td>8.099010</td>\n",
       "      <td>179.775098</td>\n",
       "      <td>100.435644</td>\n",
       "      <td>30.562307</td>\n",
       "      <td>200.980348</td>\n",
       "      <td>100.114311</td>\n",
       "      <td>17.083540</td>\n",
       "      <td>200.872037</td>\n",
       "      <td>100.107711</td>\n",
       "      <td>9.039325</td>\n",
       "      <td>10.237294</td>\n",
       "      <td>4.479448</td>\n",
       "      <td>2.764581</td>\n",
       "      <td>1.562856</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>39.822106</td>\n",
       "      <td>42.371290</td>\n",
       "      <td>13.688365</td>\n",
       "      <td>54.467389</td>\n",
       "      <td>20.069084</td>\n",
       "      <td>9.259435</td>\n",
       "      <td>50.713844</td>\n",
       "      <td>19.922625</td>\n",
       "      <td>4.310668</td>\n",
       "      <td>50.573847</td>\n",
       "      <td>19.568609</td>\n",
       "      <td>2.275873</td>\n",
       "      <td>2.791840</td>\n",
       "      <td>2.461214</td>\n",
       "      <td>0.753773</td>\n",
       "      <td>1.315491</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>408.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>23.200000</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>1.040000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>74.000000</td>\n",
       "      <td>408.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>143.700000</td>\n",
       "      <td>87.000000</td>\n",
       "      <td>24.430000</td>\n",
       "      <td>166.600000</td>\n",
       "      <td>87.000000</td>\n",
       "      <td>14.160000</td>\n",
       "      <td>167.000000</td>\n",
       "      <td>87.000000</td>\n",
       "      <td>7.520000</td>\n",
       "      <td>8.500000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.300000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>101.000000</td>\n",
       "      <td>415.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>179.400000</td>\n",
       "      <td>101.000000</td>\n",
       "      <td>30.500000</td>\n",
       "      <td>201.400000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>17.120000</td>\n",
       "      <td>201.200000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>9.050000</td>\n",
       "      <td>10.300000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.780000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>127.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>216.400000</td>\n",
       "      <td>114.000000</td>\n",
       "      <td>36.790000</td>\n",
       "      <td>235.300000</td>\n",
       "      <td>114.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>235.300000</td>\n",
       "      <td>113.000000</td>\n",
       "      <td>10.590000</td>\n",
       "      <td>12.100000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>3.270000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>243.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>51.000000</td>\n",
       "      <td>350.800000</td>\n",
       "      <td>165.000000</td>\n",
       "      <td>59.640000</td>\n",
       "      <td>363.700000</td>\n",
       "      <td>170.000000</td>\n",
       "      <td>30.910000</td>\n",
       "      <td>395.000000</td>\n",
       "      <td>175.000000</td>\n",
       "      <td>17.770000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>5.400000</td>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Account Length    Area Code  VMail Message     Day Mins    Day Calls  \\\n",
       "count     3333.000000  3333.000000    3333.000000  3333.000000  3333.000000   \n",
       "mean       101.064806   437.182418       8.099010   179.775098   100.435644   \n",
       "std         39.822106    42.371290      13.688365    54.467389    20.069084   \n",
       "min          1.000000   408.000000       0.000000     0.000000     0.000000   \n",
       "25%         74.000000   408.000000       0.000000   143.700000    87.000000   \n",
       "50%        101.000000   415.000000       0.000000   179.400000   101.000000   \n",
       "75%        127.000000   510.000000      20.000000   216.400000   114.000000   \n",
       "max        243.000000   510.000000      51.000000   350.800000   165.000000   \n",
       "\n",
       "        Day Charge     Eve Mins    Eve Calls   Eve Charge   Night Mins  \\\n",
       "count  3333.000000  3333.000000  3333.000000  3333.000000  3333.000000   \n",
       "mean     30.562307   200.980348   100.114311    17.083540   200.872037   \n",
       "std       9.259435    50.713844    19.922625     4.310668    50.573847   \n",
       "min       0.000000     0.000000     0.000000     0.000000    23.200000   \n",
       "25%      24.430000   166.600000    87.000000    14.160000   167.000000   \n",
       "50%      30.500000   201.400000   100.000000    17.120000   201.200000   \n",
       "75%      36.790000   235.300000   114.000000    20.000000   235.300000   \n",
       "max      59.640000   363.700000   170.000000    30.910000   395.000000   \n",
       "\n",
       "       Night Calls  Night Charge    Intl Mins   Intl Calls  Intl Charge  \\\n",
       "count  3333.000000   3333.000000  3333.000000  3333.000000  3333.000000   \n",
       "mean    100.107711      9.039325    10.237294     4.479448     2.764581   \n",
       "std      19.568609      2.275873     2.791840     2.461214     0.753773   \n",
       "min      33.000000      1.040000     0.000000     0.000000     0.000000   \n",
       "25%      87.000000      7.520000     8.500000     3.000000     2.300000   \n",
       "50%     100.000000      9.050000    10.300000     4.000000     2.780000   \n",
       "75%     113.000000     10.590000    12.100000     6.000000     3.270000   \n",
       "max     175.000000     17.770000    20.000000    20.000000     5.400000   \n",
       "\n",
       "       CustServ Calls  \n",
       "count     3333.000000  \n",
       "mean         1.562856  \n",
       "std          1.315491  \n",
       "min          0.000000  \n",
       "25%          1.000000  \n",
       "50%          1.000000  \n",
       "75%          2.000000  \n",
       "max          9.000000  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check the mean and std of churn dataset\n",
    "churn.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Account Length</th>\n",
       "      <th>Area Code</th>\n",
       "      <th>VMail Message</th>\n",
       "      <th>Day Mins</th>\n",
       "      <th>Day Calls</th>\n",
       "      <th>Day Charge</th>\n",
       "      <th>Eve Mins</th>\n",
       "      <th>Eve Calls</th>\n",
       "      <th>Eve Charge</th>\n",
       "      <th>Night Mins</th>\n",
       "      <th>Night Calls</th>\n",
       "      <th>Night Charge</th>\n",
       "      <th>Intl Mins</th>\n",
       "      <th>Intl Calls</th>\n",
       "      <th>Intl Charge</th>\n",
       "      <th>CustServ Calls</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2233.000000</td>\n",
       "      <td>2233.000000</td>\n",
       "      <td>2233.000000</td>\n",
       "      <td>2233.000000</td>\n",
       "      <td>2233.000000</td>\n",
       "      <td>2233.000000</td>\n",
       "      <td>2233.000000</td>\n",
       "      <td>2233.000000</td>\n",
       "      <td>2233.000000</td>\n",
       "      <td>2233.000000</td>\n",
       "      <td>2233.000000</td>\n",
       "      <td>2233.000000</td>\n",
       "      <td>2233.000000</td>\n",
       "      <td>2233.000000</td>\n",
       "      <td>2233.000000</td>\n",
       "      <td>2233.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>100.511867</td>\n",
       "      <td>436.746082</td>\n",
       "      <td>8.069413</td>\n",
       "      <td>180.081326</td>\n",
       "      <td>100.699955</td>\n",
       "      <td>30.614344</td>\n",
       "      <td>201.111688</td>\n",
       "      <td>100.343932</td>\n",
       "      <td>17.094734</td>\n",
       "      <td>200.785132</td>\n",
       "      <td>99.876847</td>\n",
       "      <td>9.035387</td>\n",
       "      <td>10.228034</td>\n",
       "      <td>4.454993</td>\n",
       "      <td>2.762064</td>\n",
       "      <td>1.564263</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>39.901300</td>\n",
       "      <td>42.135476</td>\n",
       "      <td>13.725095</td>\n",
       "      <td>54.477559</td>\n",
       "      <td>20.010022</td>\n",
       "      <td>9.261162</td>\n",
       "      <td>50.697458</td>\n",
       "      <td>20.016748</td>\n",
       "      <td>4.309337</td>\n",
       "      <td>50.981357</td>\n",
       "      <td>19.544787</td>\n",
       "      <td>2.294206</td>\n",
       "      <td>2.787702</td>\n",
       "      <td>2.451659</td>\n",
       "      <td>0.752724</td>\n",
       "      <td>1.326769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>408.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.600000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>0.440000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>23.200000</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>1.040000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>73.000000</td>\n",
       "      <td>408.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>143.700000</td>\n",
       "      <td>88.000000</td>\n",
       "      <td>24.430000</td>\n",
       "      <td>166.500000</td>\n",
       "      <td>87.000000</td>\n",
       "      <td>14.150000</td>\n",
       "      <td>166.700000</td>\n",
       "      <td>86.000000</td>\n",
       "      <td>7.500000</td>\n",
       "      <td>8.500000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.300000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>99.000000</td>\n",
       "      <td>415.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>179.300000</td>\n",
       "      <td>101.000000</td>\n",
       "      <td>30.480000</td>\n",
       "      <td>201.300000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>17.110000</td>\n",
       "      <td>201.400000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>9.060000</td>\n",
       "      <td>10.300000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.780000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>127.000000</td>\n",
       "      <td>415.000000</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>216.200000</td>\n",
       "      <td>114.000000</td>\n",
       "      <td>36.750000</td>\n",
       "      <td>234.500000</td>\n",
       "      <td>114.000000</td>\n",
       "      <td>19.930000</td>\n",
       "      <td>235.400000</td>\n",
       "      <td>113.000000</td>\n",
       "      <td>10.590000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>3.240000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>232.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>346.800000</td>\n",
       "      <td>165.000000</td>\n",
       "      <td>58.960000</td>\n",
       "      <td>363.700000</td>\n",
       "      <td>170.000000</td>\n",
       "      <td>30.910000</td>\n",
       "      <td>395.000000</td>\n",
       "      <td>175.000000</td>\n",
       "      <td>17.770000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>5.400000</td>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Account Length    Area Code  VMail Message     Day Mins    Day Calls  \\\n",
       "count     2233.000000  2233.000000    2233.000000  2233.000000  2233.000000   \n",
       "mean       100.511867   436.746082       8.069413   180.081326   100.699955   \n",
       "std         39.901300    42.135476      13.725095    54.477559    20.010022   \n",
       "min          1.000000   408.000000       0.000000     2.600000    30.000000   \n",
       "25%         73.000000   408.000000       0.000000   143.700000    88.000000   \n",
       "50%         99.000000   415.000000       0.000000   179.300000   101.000000   \n",
       "75%        127.000000   415.000000      19.000000   216.200000   114.000000   \n",
       "max        232.000000   510.000000      50.000000   346.800000   165.000000   \n",
       "\n",
       "        Day Charge     Eve Mins    Eve Calls   Eve Charge   Night Mins  \\\n",
       "count  2233.000000  2233.000000  2233.000000  2233.000000  2233.000000   \n",
       "mean     30.614344   201.111688   100.343932    17.094734   200.785132   \n",
       "std       9.261162    50.697458    20.016748     4.309337    50.981357   \n",
       "min       0.440000     0.000000     0.000000     0.000000    23.200000   \n",
       "25%      24.430000   166.500000    87.000000    14.150000   166.700000   \n",
       "50%      30.480000   201.300000   100.000000    17.110000   201.400000   \n",
       "75%      36.750000   234.500000   114.000000    19.930000   235.400000   \n",
       "max      58.960000   363.700000   170.000000    30.910000   395.000000   \n",
       "\n",
       "       Night Calls  Night Charge    Intl Mins   Intl Calls  Intl Charge  \\\n",
       "count  2233.000000   2233.000000  2233.000000  2233.000000  2233.000000   \n",
       "mean     99.876847      9.035387    10.228034     4.454993     2.762064   \n",
       "std      19.544787      2.294206     2.787702     2.451659     0.752724   \n",
       "min      33.000000      1.040000     0.000000     0.000000     0.000000   \n",
       "25%      86.000000      7.500000     8.500000     3.000000     2.300000   \n",
       "50%     100.000000      9.060000    10.300000     4.000000     2.780000   \n",
       "75%     113.000000     10.590000    12.000000     6.000000     3.240000   \n",
       "max     175.000000     17.770000    20.000000    18.000000     5.400000   \n",
       "\n",
       "       CustServ Calls  \n",
       "count     2233.000000  \n",
       "mean         1.564263  \n",
       "std          1.326769  \n",
       "min          0.000000  \n",
       "25%          1.000000  \n",
       "50%          1.000000  \n",
       "75%          2.000000  \n",
       "max          9.000000  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check the mean and std of train dataset\n",
    "X_train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Account Length</th>\n",
       "      <th>Area Code</th>\n",
       "      <th>VMail Message</th>\n",
       "      <th>Day Mins</th>\n",
       "      <th>Day Calls</th>\n",
       "      <th>Day Charge</th>\n",
       "      <th>Eve Mins</th>\n",
       "      <th>Eve Calls</th>\n",
       "      <th>Eve Charge</th>\n",
       "      <th>Night Mins</th>\n",
       "      <th>Night Calls</th>\n",
       "      <th>Night Charge</th>\n",
       "      <th>Intl Mins</th>\n",
       "      <th>Intl Calls</th>\n",
       "      <th>Intl Charge</th>\n",
       "      <th>CustServ Calls</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1100.000000</td>\n",
       "      <td>1100.000000</td>\n",
       "      <td>1100.000000</td>\n",
       "      <td>1100.000000</td>\n",
       "      <td>1100.000000</td>\n",
       "      <td>1100.000000</td>\n",
       "      <td>1100.000000</td>\n",
       "      <td>1100.000000</td>\n",
       "      <td>1100.000000</td>\n",
       "      <td>1100.000000</td>\n",
       "      <td>1100.000000</td>\n",
       "      <td>1100.000000</td>\n",
       "      <td>1100.000000</td>\n",
       "      <td>1100.000000</td>\n",
       "      <td>1100.000000</td>\n",
       "      <td>1100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>102.187273</td>\n",
       "      <td>438.068182</td>\n",
       "      <td>8.159091</td>\n",
       "      <td>179.153455</td>\n",
       "      <td>99.899091</td>\n",
       "      <td>30.456673</td>\n",
       "      <td>200.713727</td>\n",
       "      <td>99.648182</td>\n",
       "      <td>17.060818</td>\n",
       "      <td>201.048455</td>\n",
       "      <td>100.576364</td>\n",
       "      <td>9.047318</td>\n",
       "      <td>10.256091</td>\n",
       "      <td>4.529091</td>\n",
       "      <td>2.769691</td>\n",
       "      <td>1.560000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>39.655241</td>\n",
       "      <td>42.851606</td>\n",
       "      <td>13.619526</td>\n",
       "      <td>54.466214</td>\n",
       "      <td>20.186929</td>\n",
       "      <td>9.259238</td>\n",
       "      <td>50.769114</td>\n",
       "      <td>19.731013</td>\n",
       "      <td>4.315238</td>\n",
       "      <td>49.758868</td>\n",
       "      <td>19.617419</td>\n",
       "      <td>2.239209</td>\n",
       "      <td>2.801395</td>\n",
       "      <td>2.480877</td>\n",
       "      <td>0.756213</td>\n",
       "      <td>1.292887</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>408.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.200000</td>\n",
       "      <td>46.000000</td>\n",
       "      <td>2.650000</td>\n",
       "      <td>43.700000</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>1.970000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>76.000000</td>\n",
       "      <td>415.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>143.650000</td>\n",
       "      <td>86.000000</td>\n",
       "      <td>24.422500</td>\n",
       "      <td>166.675000</td>\n",
       "      <td>86.000000</td>\n",
       "      <td>14.167500</td>\n",
       "      <td>168.475000</td>\n",
       "      <td>87.000000</td>\n",
       "      <td>7.580000</td>\n",
       "      <td>8.500000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.300000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>103.000000</td>\n",
       "      <td>415.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>180.050000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>30.610000</td>\n",
       "      <td>201.500000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>17.130000</td>\n",
       "      <td>200.950000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>9.045000</td>\n",
       "      <td>10.300000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.780000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>128.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>216.925000</td>\n",
       "      <td>114.000000</td>\n",
       "      <td>36.875000</td>\n",
       "      <td>236.525000</td>\n",
       "      <td>113.000000</td>\n",
       "      <td>20.102500</td>\n",
       "      <td>235.075000</td>\n",
       "      <td>114.000000</td>\n",
       "      <td>10.582500</td>\n",
       "      <td>12.200000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>3.290000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>243.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>51.000000</td>\n",
       "      <td>350.800000</td>\n",
       "      <td>163.000000</td>\n",
       "      <td>59.640000</td>\n",
       "      <td>341.300000</td>\n",
       "      <td>164.000000</td>\n",
       "      <td>29.010000</td>\n",
       "      <td>367.700000</td>\n",
       "      <td>166.000000</td>\n",
       "      <td>16.550000</td>\n",
       "      <td>18.900000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>5.100000</td>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Account Length    Area Code  VMail Message     Day Mins    Day Calls  \\\n",
       "count     1100.000000  1100.000000    1100.000000  1100.000000  1100.000000   \n",
       "mean       102.187273   438.068182       8.159091   179.153455    99.899091   \n",
       "std         39.655241    42.851606      13.619526    54.466214    20.186929   \n",
       "min          1.000000   408.000000       0.000000     0.000000     0.000000   \n",
       "25%         76.000000   415.000000       0.000000   143.650000    86.000000   \n",
       "50%        103.000000   415.000000       0.000000   180.050000   100.000000   \n",
       "75%        128.000000   510.000000      20.000000   216.925000   114.000000   \n",
       "max        243.000000   510.000000      51.000000   350.800000   163.000000   \n",
       "\n",
       "        Day Charge     Eve Mins    Eve Calls   Eve Charge   Night Mins  \\\n",
       "count  1100.000000  1100.000000  1100.000000  1100.000000  1100.000000   \n",
       "mean     30.456673   200.713727    99.648182    17.060818   201.048455   \n",
       "std       9.259238    50.769114    19.731013     4.315238    49.758868   \n",
       "min       0.000000    31.200000    46.000000     2.650000    43.700000   \n",
       "25%      24.422500   166.675000    86.000000    14.167500   168.475000   \n",
       "50%      30.610000   201.500000   100.000000    17.130000   200.950000   \n",
       "75%      36.875000   236.525000   113.000000    20.102500   235.075000   \n",
       "max      59.640000   341.300000   164.000000    29.010000   367.700000   \n",
       "\n",
       "       Night Calls  Night Charge    Intl Mins   Intl Calls  Intl Charge  \\\n",
       "count  1100.000000   1100.000000  1100.000000  1100.000000  1100.000000   \n",
       "mean    100.576364      9.047318    10.256091     4.529091     2.769691   \n",
       "std      19.617419      2.239209     2.801395     2.480877     0.756213   \n",
       "min      36.000000      1.970000     0.000000     0.000000     0.000000   \n",
       "25%      87.000000      7.580000     8.500000     3.000000     2.300000   \n",
       "50%     100.000000      9.045000    10.300000     4.000000     2.780000   \n",
       "75%     114.000000     10.582500    12.200000     6.000000     3.290000   \n",
       "max     166.000000     16.550000    18.900000    20.000000     5.100000   \n",
       "\n",
       "       CustServ Calls  \n",
       "count     1100.000000  \n",
       "mean         1.560000  \n",
       "std          1.292887  \n",
       "min          0.000000  \n",
       "25%          1.000000  \n",
       "50%          1.000000  \n",
       "75%          2.000000  \n",
       "max          9.000000  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check the mean and std of test dataset\n",
    "X_test.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Z is  0.462438 \n",
      "P value is  0.643767\n"
     ]
    }
   ],
   "source": [
    "# Validate your partition by performing a two‐sample Z‐test for the difference in means \n",
    "# for the mean Day mins in the training set versus the mean Day mins in the test set\n",
    "\n",
    "n1 = X_train.shape[0]\n",
    "x1 = X_train['Day Mins'].mean()\n",
    "sd1 = stdev(X_train['Day Mins'])\n",
    "\n",
    "n2 = X_test.shape[0]\n",
    "x2 = X_test['Day Mins'].mean()\n",
    "sd2 = stdev(X_test['Day Mins'])\n",
    "\n",
    "# calculate the denominator pooled standard error\n",
    "pooledSE = np.sqrt(sd1**2/n1 + sd2**2/n2)\n",
    "\n",
    "#calculate z value\n",
    "z = round(((x1 - x2) - 0) /pooledSE,6)\n",
    "\n",
    "# caluculate p-value\n",
    "pval =  round(2*(1 - norm.cdf(abs(z))),6)\n",
    "\n",
    "print('Z is ',z,'\\nP value is ',pval)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h5>The Null hypothesis H0 here means that there is <u>no significant difference</u> between the means of Day mins between the train and test data sets\n",
    "<h5>The Alternative hypothesis Ha here means that there is <u>some difference</u> between the means of Day mins between the train and test data sets\n",
    "<h5>Because the p-value > than alpha 0.05 the null hypothesis H0 is accepted.<br/>\n",
    "    This means that there is not enough evidence of significant differences between the Day mins in the train and test datasets \n",
    "</h5>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>Task 10: Validate your partition by testing for the difference in proportion of true churn records\n",
    "for the training set versus the test set</h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Z is  -0.062165 P value is  0.950431\n"
     ]
    }
   ],
   "source": [
    "# Validate your partition by performing a two‐sample Z‐test for the difference in proportions \n",
    "# for the proportion of true churn records in the training set versus the proportion of true churn records \n",
    "# in the test set. \n",
    "\n",
    "n1 = X_train.shape[0]\n",
    "x1 = X_train.loc[X_train['Churn']==True].shape[0]\n",
    "p1 = x1 / n1\n",
    "\n",
    "n2 = X_test.shape[0]\n",
    "x2 = X_test.loc[X_test['Churn']==True].shape[0] \n",
    "p2 = x2 / n2\n",
    "\n",
    "p = (x1+x2)/(n1+n2)\n",
    "\n",
    "#calculate z value\n",
    "z = round(((p1-p2)-0)/np.sqrt(p*(1-p)*(1/n1+1/n2)),6)\n",
    "\n",
    "# caluculate p-value\n",
    "pval =  round(2*(1 - norm.cdf(abs(z))),6)\n",
    "print('Z is ',z,'P value is ',pval)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h5>The Null hypothesis H0 here means that there is <u>no significant difference</u> between the proportion of True values of churn feature between the train and test data sets\n",
    "<h5>The Alternative hypothesis Ha here means that there is <u>some difference</u> between the proportion of True values of churn feature between the train and test data sets\n",
    "<h5>A negative Z-score shows that the proportion of true curn records in the test dataset is slightly higher than that of the train dataset\n",
    "<h5>Because the p-value > than alpha 0.05 the null hypothesis H0 is accepted.<br/>\n",
    "This means that there is not evidence of significant difference between the true churn value proportions in the training and test datasets </h5>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>Task 11: Summary of results</h4>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>From the above observations, we can say the the accuracy of the baseline model performace to predict false churn values is 86% <br/>\n",
    "Day mins feature does not have any significant difference of means between the train and test datasets<br/>\n",
    "Proportion of True churn values between the train and test datasets does not have any significant difference<br/>\n",
    "For a model to outperform our baseline model, we would need an accuracy of predicting false churn greater than 85%<br/>\n",
    "Below code shows an example of if we rebalanced the False churn to increase upto 90% and checked the P-value, it would be less than alpha 0.05. In this case we would reject the null hypothesis and accept the alternate hypothesis which states that there is some significant difference in the churn values of the rebalanced training and testing datasets\n",
    "</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The portion size is  997.0000000000005\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 3230 entries, 2360 to 814\n",
      "Data columns (total 22 columns):\n",
      " #   Column          Non-Null Count  Dtype  \n",
      "---  ------          --------------  -----  \n",
      " 0   State           3230 non-null   object \n",
      " 1   Account Length  3230 non-null   int64  \n",
      " 2   Area Code       3230 non-null   int64  \n",
      " 3   Phone           3230 non-null   object \n",
      " 4   Intl Plan       3230 non-null   object \n",
      " 5   VMail Plan      3230 non-null   object \n",
      " 6   VMail Message   3230 non-null   int64  \n",
      " 7   Day Mins        3230 non-null   float64\n",
      " 8   Day Calls       3230 non-null   int64  \n",
      " 9   Day Charge      3230 non-null   float64\n",
      " 10  Eve Mins        3230 non-null   float64\n",
      " 11  Eve Calls       3230 non-null   int64  \n",
      " 12  Eve Charge      3230 non-null   float64\n",
      " 13  Night Mins      3230 non-null   float64\n",
      " 14  Night Calls     3230 non-null   int64  \n",
      " 15  Night Charge    3230 non-null   float64\n",
      " 16  Intl Mins       3230 non-null   float64\n",
      " 17  Intl Calls      3230 non-null   int64  \n",
      " 18  Intl Charge     3230 non-null   float64\n",
      " 19  CustServ Calls  3230 non-null   int64  \n",
      " 20  Old Churn       3230 non-null   object \n",
      " 21  Churn           3230 non-null   bool   \n",
      "dtypes: bool(1), float64(8), int64(8), object(5)\n",
      "memory usage: 558.3+ KB\n",
      "Proportion of Churn in rebalanced training data is \n",
      " False    0.9\n",
      "True     0.1\n",
      "Name: Churn, dtype: float64\n",
      "0.1\n",
      "0.1\n",
      "0.1115473441108545\n",
      "Z is  -4.136035 P value is  3.5e-05\n"
     ]
    }
   ],
   "source": [
    "# create variables needed to compute resampled record size\n",
    "false_churn_records = X_train.loc[X_train['Churn']==False].shape[0]\n",
    "total_records = X_train.shape[0]\n",
    "\n",
    "# determin portion size to ressample\n",
    "portion_size = (0.9 * total_records - false_churn_records) / 0.1\n",
    "print('The portion size is ', portion_size)\n",
    "\n",
    "# subset the records to be resampled\n",
    "to_resample = X_train.loc[X_train['Churn']==False]\n",
    "\n",
    "# resample the '>50K' records to the determined sample size\n",
    "our_resample = to_resample.sample(n = round(portion_size), replace = True)\n",
    "\n",
    "# concatenate the sampled data with the rest of the training data so that it's rebalanced\n",
    "X_train_rebal = pd.concat([X_train, our_resample])\n",
    "X_train_rebal.info()\n",
    "\n",
    "# table proportion of churn in training data\n",
    "proportion_churn = X_train_rebal['Churn'].value_counts() / X_train_rebal.shape[0]\n",
    "print('Proportion of Churn in rebalanced training data is \\n',proportion_churn)\n",
    "\n",
    "# Validate your rebalanced partition by performing a two‐sample Z‐test for the difference in proportions \n",
    "# for the proportion of true churn records in the rebalance training set versus the proportion of true churn records \n",
    "# in the test set\n",
    "\n",
    "n1 = X_train_rebal.shape[0]\n",
    "x1 = X_train_rebal.loc[X_train_rebal['Churn']==True].shape[0]\n",
    "p1 = x1 / n1\n",
    "print(p1)\n",
    "n2 = X_test.shape[0]\n",
    "x2 = X_test.loc[X_test['Churn']==True].shape[0] \n",
    "p2 = x2 / n2\n",
    "print(p1)\n",
    "p = (x1+x2)/(n1+n2)\n",
    "print(p)\n",
    "#calculate z value\n",
    "z = round(((p1-p2)-0)/np.sqrt(p*(1-p)*(1/n1+1/n2)),6)\n",
    "\n",
    "# caluculate p-value\n",
    "pval =  round(2*(1 - norm.cdf(abs(z))),6)\n",
    "print('Z is ',z,'P value is ',pval)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
